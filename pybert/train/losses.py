import torch
from torch.nn import CrossEntropyLoss
from torch.nn import BCEWithLogitsLoss

__call__ = ['CrossEntropy','BCEWithLogLoss']

class CrossEntropy(object):
    def __init__(self):
        self.loss_f = CrossEntropyLoss()

    def __call__(self, output, target):
        loss = self.loss_f(input=output, target=target)
        return loss

class BCEWithLogLoss(object):
    def __init__(self):
        #pos_weight = torch.tensor([10.713090021047572, 9.29692036810889, 32.753326174479774, 35.08771891351186, 74.59207285333164, 97.8593242244855, 35.16483477840841, 26.20802599338226, 15.99200391808094, 109.5890373428412, 45.0704219004166, 39.50617235177565, 94.39527745146675, 59.81308299414798, 9.87959243630876, 29.493087285778, 165.80310021745595, 188.23528304498333, 14.64530885745854, 35.398229696922236, 36.44646883318373, 20.63185028606157, 39.215685793925424, 51.948051104739434, 54.88850677721258, 38.60072329794061, 15.904572485563754, 18.779342612797286, 36.655211493067455, 18.099547408939213, 23.827252242537213, 17.012227448100866, 95.23809240362822, 37.20930189291509, 145.4545388429755, 46.24277389822581, 113.07420095144167, 67.51054709893361, 55.749127948621464, 69.41431519708644, 11.769032689337871, 162.4365399778406, 38.69407450188544], dtype=torch.float)
        #pos_weight = torch.as_tensor([0.18149013721341534, 0.1550288541341788, 0.593314332696613, 0.6369327134163677, 1.3750758379316792, 1.8098269454209976, 0.638373631689608, 0.4710146911450522, 0.28012721412750713, 2.028997903235953, 0.8234605980411228, 0.7194919936266932, 1.7451008569397515, 1.0989288145312581, 0.16591614472609814, 0.5323964165692234, 3.0793637458258494, 3.4985115072911857, 0.25496407131718607, 0.6427346409763374, 0.6623211025713808, 0.36682324516625364, 0.7140642208863034, 0.95196984332255, 1.00691257548024, 0.7025735801600312, 0.27849354835797197, 0.33220893900103987, 0.6662214817402425, 0.3195068921185435, 0.4265296762049289, 0.2991902010909229, 1.7608489454447402, 0.6765747207687945, 2.6991486764886314, 0.8453661218730767, 2.0941185620731635, 1.2427567635671166, 1.0229933751170477, 1.278328876313571, 0.20122054013731117, 3.0164592037613396, 0.7043178574987283], dtype=torch.float).cuda()
        # pos_weight = torch.tensor([9.713090056913291, 8.296920395119116, 31.753326509723642, 34.08771929824562, 73.5920745920746, 96.85932721712538, 34.16483516483517, 25.208026208026208, 14.992003998001, 108.58904109589041, 44.070422535211264, 38.50617283950617, 93.3952802359882, 58.81308411214953, 8.879592466810744, 28.493087557603687, 164.80310880829015, 187.23529411764707, 13.645308924485127, 34.39823008849557, 35.44646924829157, 19.63185041908446, 38.21568627450981, 50.94805194805195, 53.888507718696395, 37.600723763570564, 14.904572564612327, 17.779342723004696, 35.65521191294387, 17.099547511312217, 22.827252419955325, 16.01222753854333, 94.23809523809524, 36.2093023255814, 144.45454545454547, 45.24277456647399, 112.07420494699646, 66.51054852320675, 54.749128919860624, 68.41431670281996, 10.769032732622287, 161.43654822335026, 37.694074969770256], dtype=torch.float)
        # pos_weight_log = torch.tensor([3.2799303379296467, 3.052575944274173, 4.988835832841197, 5.091180171420603, 6.201478500267866, 6.59781907693192, 5.094440261142368, 4.655811254282848, 3.906121337728653, 6.762734702176821, 5.46173882373624, 5.267017834489527, 6.545277739552671, 5.878065241170905, 3.1504934649083807, 4.832540057815933, 7.364599647223043, 7.548708600385582, 3.770333151923572, 5.10426242992401, 5.147570025549236, 4.2951242567194825, 5.256093033286395, 5.670955079382194, 5.751905731037081, 5.232688527004757, 3.897683097002333, 4.152130085658581, 5.156041073418236, 4.09588624386853, 4.512685316313664, 4.001102116999225, 6.558238474268752, 5.178288474376939, 7.174471790711222, 5.499615501901884, 6.808310454739111, 6.055511264001184, 5.774764105939172, 6.096226356765585, 3.4288167686768793, 7.334823422488885, 5.236265862850431], dtype=torch.float)
        self.loss_fn = BCEWithLogitsLoss() #pos_weight=pos_weight_log.cuda()) #pos_weight=pos_weight.cuda())

    def __call__(self,output,target):
        output = output.float() #.cuda()
        #print(output)
        target = target.float() #.cuda()
        #print(target)
        loss = self.loss_fn(input=output, target=target)
        #print(loss)
        return loss


